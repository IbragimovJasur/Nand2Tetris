// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.

    // Decoding instruction
    Mux16(
        a=false, 
        b=instruction, 
        sel=instruction[15], 
        out[0]=cJGT,
        out[1]=cJEQ,
        out[2]=cJLT,
        out[3]=writeM,
        out[4]=cDestD,
        out[5]=cDestA,
        out[6]=cALUno,
        out[7]=cALUf,
        out[8]=cALUny,
        out[9]=cALUzy,
        out[10]=cALUnx,
        out[11]=cALUzx,
        out[12]=cLoadAorM,
        // 13,14 bits are not used
        out[15]=cType
    );

    // ---------- ALU ----------
    // Select what goes to ALU y
    Mux16(a=outAReg, b=inM, sel=cLoadAorM, out=inALUy);
    ALU(
        x=inALUx, 
        y=inALUy, 
        zx=cALUzx, 
        nx=cALUnx, 
        zy=cALUzy, 
        ny=cALUny, 
        f=cALUf, 
        no=cALUno, 
        out=outALU,
        out=outM,
        zr=flagZero,
        ng=flagNeg
    );
    Not(in=flagZero, out=notFlagZero);
    Not(in=flagNeg, out=notFlagNeg);
    And(a=notFlagZero, b=notFlagNeg, out=flagPos);

    // ---------- Register A ----------
    // loadA if cType == 0 or cDestA == 1
    Not(in=cType, out=aType);
    Or(a=aType, b=cDestA, out=loadA);
    // what to load: instruction or ALU out
    Mux16(a=instruction, b=outALU, sel=cType, out=inAReg);
    ARegister(in=inAReg, load=loadA, out=outAReg, out[0..14]=addressM);

    // ---------- Register D ----------
    DRegister(in=outALU, load=cDestD, out=inALUx);

    // ---------- JUMPs ----------
    // jump if cJEQ==1 and zr==0 or cJGT==1 and flagPos==0 or cJLT==1 and flagNeg==0
    And(a=cJEQ, b=flagZero, out=jumpJEQ);
    And(a=cJGT, b=flagPos, out=jumpJGT);
    And(a=cJLT, b=flagNeg, out=jumpJLT);
    Or(a=jumpJEQ, b=jumpJGT, out=jumpJGE);
    Or(a=jumpJGE, b=jumpJLT, out=jump);

    // ---------- PC ----------
    PC(in=outAReg, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}
